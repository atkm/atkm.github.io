<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Atsuya Kumano</title>
    <link>http://akumano.xyz/posts/</link>
    <description>Recent content in Posts on Atsuya Kumano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://akumano.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Articles---mainly ML Deployment and Streaming Systems</title>
      <link>http://akumano.xyz/posts/taxi-project-reading-list/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/taxi-project-reading-list/</guid>
      <description>Articles and talks that I referred to while working on the taxi data project. Published here as a note to myself.
Model Serving  FLIP-23. The document also discusses implementing model training as well as model serving. Two linked documents&amp;mdash;&amp;ldquo;Flink ML Roadmap&amp;rdquo; and &amp;ldquo;Flink-MS&amp;rdquo;&amp;mdash;are also worth reading. Boris Lublinsky&amp;rsquo;s book &amp;ldquo;Serving Machine Learning Models&amp;rdquo;, and talk.  Distributed Systems  Please Stop Calling Database Systems AP or CP. Kate Matsudaira on distributed systems Distributed Systems for Fun and Profit Martin Kleppmann&amp;rsquo;s book and interview.</description>
    </item>
    
    <item>
      <title>Keyword Extraction from arXiv - Summary</title>
      <link>http://akumano.xyz/posts/arxiv-keyword-extraction-summary/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/arxiv-keyword-extraction-summary/</guid>
      <description>In the previous articles on arXiv keyword extraction, I focused on details of setting up an infrastructure to serve the algorithm. Since then, I wrote a more complete keyword extraction algorithm, and deployed it to Google Cloud Platform. This article a more high-level overview of the end product.
Motivation I built this app to help myself keep learning mathematics. When I was in graduate school, I learned the terminology of my area of study through attending seminars &amp;mdash; whenever the speaker used a term that I wasn&amp;rsquo;t familiar with, I would write it down and look it up later.</description>
    </item>
    
    <item>
      <title>Learning Resources</title>
      <link>http://akumano.xyz/posts/learning-resources/</link>
      <pubDate>Wed, 04 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/learning-resources/</guid>
      <description>Freely available online resources that I&amp;rsquo;ve found useful for learning Statistics, Machine Learning, Distributed Computing, Database Systems, and other CS and SWE topics.
Statistics and Machine Learning ML Expositions on machine learning that are freely accessible (like the ones on Coursera) tend to sweep theoretical foundation and mathematical rigor under the carpet; these are resources that don&amp;rsquo;t skimp on the hard stuff.
 Stanford CS229 Machine Learning
 One-line summary: the course teaches you how to set up a cost function based on a model and data, and figure out how to optimize it.</description>
    </item>
    
    <item>
      <title>Keyword Extraction from arXiv - Part 3</title>
      <link>http://akumano.xyz/posts/arxiv-keyword-extraction-part3/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/arxiv-keyword-extraction-part3/</guid>
      <description>This is the final part of the tutorial. We furnish the app with an UI, and deploy it to Heroku.
5. Build UI 5.1 index.html and main.js We first create a dropdown list. The selected category is stored in selected, and it is posted to /start when submit is called. Afterwards, the component polls /results.
main.js - categoryDropdown
var categoryDropdown = new Vue({ el: &#39;#category-dropdown&#39;, data: { selected: &#39;&#39; }, methods: { submit: function() { keywordsResult.</description>
    </item>
    
    <item>
      <title>Keyword Extraction from arXiv - Part 2</title>
      <link>http://akumano.xyz/posts/arxiv-keyword-extraction-part2/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/arxiv-keyword-extraction-part2/</guid>
      <description>In Part 1, we developed a keyword extraction algorithm. The next step is to modify the algorithm to use database. Configuring Postgres is more involved than in Flask by Example, since we need models to store article data. The following diagram shows the architecture of our system.
We use the end product of Flask by Example tutorial as a boilerplate. Complete Part 1-4 of Flask by Example, or clone the repo of and configure Postgres by following these steps:</description>
    </item>
    
    <item>
      <title>Keyword Extraction from arXiv - Part 1</title>
      <link>http://akumano.xyz/posts/arxiv-keyword-extraction-part1/</link>
      <pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/arxiv-keyword-extraction-part1/</guid>
      <description>This is a tutorial on web development written for people with a statistical analysis, scientific computing, or machine learning background. We start with an algorithm using data that fits comfortably into memory, and modify it to accept a large input. We then set up an infrastructure to serve the resulting algorithm. This tutorial focuses on the infrastructure rather than the algorithm, which will remain rudimentary. The end product is a Heroku deployment of a text summarization algorithm that analyzes articles on arXiv to extract keywords from each research category within mathematics.</description>
    </item>
    
    <item>
      <title>Simple Linear Regression with Heteroskedastic Noise</title>
      <link>http://akumano.xyz/posts/heteroskedasticity/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/heteroskedasticity/</guid>
      <description>Introduction The model we consider is \(Y_i = \alpha + \beta x_i + \epsilon_i\), where \( \epsilon_i \) are uncorrelated, and \( \mathbb{V}(\epsilon_i) \) depends on \( i \). We discuss two solutions to finding estimators of \( \alpha, \beta \). Weighted least squares regression leads to best linear unbiased estimators (BLUE). Also, with stronger assumptions on \( \epsilon_i \), maximum likelihood estimators (MLE) can be found. We begin with a discussion of the homoskedastic case with an emphasis on relations between statistical properties of the least squares estimators and assumptions on \( \epsilon_i \), which is conducive to understanding the heteroskedastic case.</description>
    </item>
    
    <item>
      <title>Benchmarking Linear Classifiers</title>
      <link>http://akumano.xyz/posts/linear-classifiers/</link>
      <pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://akumano.xyz/posts/linear-classifiers/</guid>
      <description>I ran linear classifiers on a credit card fraud data. Parallelization. Lasso and ridge. Grid search. Published on kaggle.</description>
    </item>
    
  </channel>
</rss>